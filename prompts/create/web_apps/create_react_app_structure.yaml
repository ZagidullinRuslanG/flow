title: "Создание базовой структуры React-приложения"
category: "create"
subcategory: "web_apps"
difficulty: "intermediate"
description: |
  Этот промпт помогает создать базовую структуру React-приложения с нуля,
  включая все необходимые файлы конфигурации, компоненты и утилиты.
  Промпт генерирует полный набор файлов для начала разработки.

example: |
  Пожалуйста, создайте базовую структуру React-приложения со следующими файлами:

  1. Конфигурационные файлы:
     - package.json (зависимости и скрипты)
     - tsconfig.json (настройки TypeScript)
     - .eslintrc.js (правила линтинга)
     - .prettierrc (правила форматирования)
     - vite.config.ts (конфигурация сборки)
     - .env.example (шаблон переменных окружения)
     - .gitignore (исключения для git)
  
  2. Структура приложения:
     - src/
       - main.tsx (точка входа)
       - App.tsx (корневой компонент)
       - index.css (глобальные стили)
       - vite-env.d.ts (типы Vite)
       - components/
         - common/
           - Button/
           - Input/
           - Modal/
         - layout/
           - Header/
           - Footer/
           - Sidebar/
       - pages/
         - Home/
         - About/
         - NotFound/
       - hooks/
         - useAuth.ts
         - useTheme.ts
       - services/
         - api.ts
         - auth.ts
       - utils/
         - constants.ts
         - helpers.ts
       - store/
         - index.ts
         - slices/
       - types/
         - index.ts
       - assets/
         - images/
         - styles/
       - tests/
         - setup.ts
         - components/
  
  3. Базовые компоненты:
     - Button.tsx (с вариантами и пропсами)
     - Input.tsx (с валидацией)
     - Modal.tsx (с анимацией)
     - Header.tsx (с навигацией)
     - Footer.tsx (с ссылками)
  
  4. Утилиты и хуки:
     - API клиент (axios)
     - Хуки для аутентификации
     - Хуки для темы
     - Утилиты для форматирования
     - Константы и типы
  
  5. Стили и темы:
     - Глобальные стили
     - Темная/светлая тема
     - Переменные CSS
     - Миксины и утилиты
  
  6. Тесты:
     - Настройка Jest
     - Настройка React Testing Library
     - Примеры тестов компонентов
     - Моки и утилиты для тестов

expected_outcome: |
  Ассистент создаст:
  1. Полную структуру проекта React с TypeScript
  2. Все необходимые конфигурационные файлы
  3. Базовые компоненты с типизацией
  4. Настройку сборки и разработки
  5. Базовые утилиты и хуки
  6. Настройку тестирования
  7. Стили и темы
  8. Примеры использования

notes: |
  При создании структуры React-приложения следует учитывать:
  - Использовать функциональные компоненты
  - Добавить типизацию TypeScript
  - Следовать принципам атомарного дизайна
  - Настроить линтеры и форматтеры
  - Добавить документацию компонентов
  - Обеспечить доступность
  - Настроить тестирование
  - Использовать современные практики React
  - Обеспечить масштабируемость
  - Добавить примеры использования
  - Настроить оптимизацию сборки
  - Обеспечить поддержку различных браузеров
  - Добавить обработку ошибок
  - Настроить логирование
  - Обеспечить безопасность
  - Добавить поддержку PWA
  - Настроить интернационализацию
  - Обеспечить отзывчивый дизайн
  - Добавить анимации 